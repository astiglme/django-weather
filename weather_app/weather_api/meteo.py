import openmeteo_requests
import requests_cache
import pandas as pd
import numpy
from retry_requests import retry
from .models import DayTemp

def getMeteoTruncated(ofHour: int = 12, asModel: bool = False) -> list:
    data = list()
    dates, temps = getMeteoData()
    for index, date in enumerate(dates):
        if date.hour == ofHour:
            date = date.strftime("%Y-%m-%d")
            temp = numpy.float32(temps[index]).item() # convert numpy float to standard float for json conversion
            data.append( DayTemp(date= date, temp = temp) if asModel else {"date" : date, "temp": temp})
    return data

def getMeteoData() -> tuple[pd.DatetimeIndex, list[float]]:

    ######################################################
    #
    # autogenerated by https://open-meteo.com/en/docs/historical-weather-api
    #
    ######################################################

    cache_session = requests_cache.CachedSession('.cache', expire_after = -1)
    retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
    openmeteo = openmeteo_requests.Client(session = retry_session)

    # Make sure all required weather variables are listed here
    # The order of variables in hourly or daily is important to assign them correctly below
    url = "https://archive-api.open-meteo.com/v1/archive"
    params = {
        "latitude": 48.1372,
        "longitude": 11.5755,
        "start_date": "1980-01-01",
        "end_date": "1980-12-31",
        "hourly": "temperature_2m",
        "timezone": "Europe/Berlin"
    }
    responses = openmeteo.weather_api(url, params=params)

    # Process first location. Add a for-loop for multiple locations or weather models
    response = responses[0]
    print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
    print(f"Elevation {response.Elevation()} m asl")
    print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
    print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

    # Process hourly data. The order of variables needs to be the same as requested.
    hourly = response.Hourly()
    hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

    hourly_data = {"date": pd.date_range(
        start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
        end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
        freq = pd.Timedelta(seconds = hourly.Interval()),
        inclusive = "left"
    )}
    hourly_data["temperature_2m"] = hourly_temperature_2m

    ######################################################
    # end of autogenerated code
    ######################################################
   
    return hourly_data.get("date"), hourly_data.get("temperature_2m")
